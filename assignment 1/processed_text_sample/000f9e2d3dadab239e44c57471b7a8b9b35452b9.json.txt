viral gene compression complexity and verification.the smallest known biological organisms are by far the viruses. one of the unique adaptations that many viruses have aquired is the compression of the genes in their genomes. in this paper we study a formalized model of gene compression in viruses. specifically we define a set of constraints that describe viral gene compression strategies and investigate the properties of these constraints from the point of view of genomes as languages. we pay special attention to the finite case representing real viral genomes and describe a metric for measuring the level of compression in a real viral genome. an efficient algorithm for establishing this metric is given along with applications to real genomes including automated classification of viruses and prediction of horizontal gene transfer between host and virus..in contrast to the lengthy often redundant genomes of higher organisms the genomes of viruses are extremely efficient in the encoding of their genes. where mammalian genomes for example possess lengthy introns which code for no genes at all any given segment of a viral genome may be a coding region for several genes. in addition to prefix and suffix overlap of viral genes some genes may also be encoded in a retrograde fashion that is the gene would be read in a direction opposite to other genes. these systems provide evidence that viruses have evolved a special type of information compression technique. studying this natural compression system in a rigorous setting could yield insight into the structure of viral genomes and may contribute to a basis for classifying such structures.in this paper we will specifically consider the types of compression seen in two small doublestranded dna virus families papillomavirus and polyomavirus and singlestranded rna viruses from the bornavirus coronavirus and to a lesser extent the filovirus and retrovirus families.the importance of this genetic compression becomes obvious when considering the structure of viruses. viruses generally consist of two principal components a protein capsid and genetic material inside the capsid. the capsid serves as protection for the genetic material and also as a mechanism for inserting the genetic material into a host cell. the genetic material may consist of singleor doublestranded dna or rna and in some rare cases a mixture of the former possibly also including proteins.the need for compression stems from the fact that the size of the capsid limits the amount of room for genetic information inside the virus. in the case of polyomaviruses the genome is constrained to be approximately kbp basepairs of dna compare to the human genome of size kb yet still manages to encode distinct genes.we exposit here a formal model of the viral compression techniques in terms of constraints on languages. for example we would say that a language satisfies the viral overlapping compression property if some prefix of some word in the language is also a suffix of some other word in the language. we can likewise define constraints for other viral compression techniques including retrograde encodings. we will focus here on deterministic modeling of the genelevel mechanics in contrast to the probabilistic analysis of which addresses gene compression from the point of view of evolutionary pressures and constraints on entire genomes.the organization of the paper is as follows in section we consider basic notation and prerequisites. in section we define formal versions of the basic viral compression techniques and investigate relationships and dependencies between them. we consider also the question of for which families of languages it is possible to decide these properties. section focuses on the finitary case of the problem as this is the most interesting from the point of view of applied viral genetics. we present efficient algorithms to decide each of the properties for real viral genomes. section contains our conclusions and a discussion of practical applications.for a general introduction to virology we refer the reader to and for formal language theory preliminaries we refer to . let be a finite alphabet. we denote by and the sets of words and nonempty words respectively over and the empty word by . a language l is any subset of . for a word w we denote the length of w by w and the reversal of w by w r . let n be the set of positive integers. furthermore for k n define k w w k.a full trio is a language family closed under homomorphism inverse homomorphism and intersection with regular sets. a full trio is also referred to as a cone. it is known that every full trio is closed under arbitrary atransductions and hence arbitrary gsm mappings. we refer to for the theory of afls.for a binary relation and a language l we definewe will consider the following wellknown relations. let w v .also for each of the relations above we prepend the word proper which will be denoted by p s i where we enforce that x y above.for examplebefore formally stating the definitions of the viral properties we will define the following sets which will be used for the conditions.let l be a language and let n n such that n and let k n. then we define the following setsso for example zi l k consists of all words w l such that there exists a word u of length at least k a nonempty word x and a word v whereby xu is in l and w uv which is also in l.we now define the properties that we will study.let l let n satisfy n and let k l n. we say that l satisfies condition w n k l if zn l k l.we also call condition w k l the lweak kprefix overlapping property condition w k l the lweak ksuffix overlapping property condition w k l the lweak koverlapping property condition w k l the lweak kdoublesided overlapping property condition w k l the lweak kretrograde overlapping property and condition w k l the lweak kconcatenated retrograde overlapping property.for example a language l satisfies w k l if and only if there exists l distinct words w l whereby w uv for some u v x with u of length at least kx nonempty and xu l.we also define a strong version of the properties above.we also refer to each of these properties by replacing the prefix lweak of each condition above with strong. we now consider the relationships of these properties to each other. the following is immediate from the definitions.then the following are truealso we note the followingthen the following are trueproof. the first three statements are straightforward. for the fourth statementcombining lemma we obtainthen the following statements are truewe see however that if l abc aa andwe also define the following sets which we will use for a characterization.hence there exists x such that xu l. let i . let w u l k. thus there exists v k u y vy l w uv. therefore v p l k and w s p l k . let w s p l k . thus there exists u v such that w uv with v p l k . hence there exists x such that vx l.let i . immediate from case . let i . let w u l k. thus there exists u v k x y w uv xu lvy l. therefore u hence there exists x y such that xu l and vy l.let i . let w u l k .this leads naturally to some decision problems. one would like to provide algorithms to test whether languages or genomes satisfy these properties. namely can we decide whether a given language satisfies one of the properties depending on the language family that the given language is in for each weak condition this amounts to deciding whether zi l k l and for each strong condition it amounts to deciding whether zi l k l. proposition . let l l be language families effectively closed under intersection and the full trio operations with l being effectively semilinear and l having a decidable equality problem. then the following are true. for each k l n and i i it is decidable whether l l satisfies w i k l and it is decidable whether l l satisfies v i k. . if l l are also effectively closed under reversal then it is decidable whether l l satisfies w k l and it is decidable whether l l satisfies v k. . if l l are also effectively closed under reversal and then it is decidable whether l l satisfies w k l and it is decidable whether l l satisfies v k.also every intersectionclosed full trio is closed under union and concatenation since l l is in l and l there is an atransducer which outputs l l and there is a homomorphism which outputs l l . thus z l k z l k z l k z l k are in l and l . additionally if l l are closed under reversal then z l k is in l and l and if l l are closed under reversal and then z l k is in l and l . since l is effectively semilinear we can decide if l l is infinite and if it is not then we can effectively find the length of the longest word in l. then we can test membership of every word of length less than or equal to that length to determine whether zi l k l emptiness is always decidable for semilinear sets and since l is closed under intersection with regular languages we can decide whether w l by testing whether lw . also by the decidability of equality for l the proposition follows.we denote by ncm the family of languages defined by oneway nondeterministic reversalbounded multicounter machines. it is known that ncm is an intersection and reversal closed full trio effectively closed under semilinearity . also it is known that the family of regular languages is closed under all of the operations above and has a decidable equality problem.for each l ncm each i i and each k l n it is decidable whether l satisfies w i k l. in addition for each l reg each i i and each k l n it is decidable whether l satisfies w i k l and v i k.ideally one would like to apply the formal definitions given here to real viral genomes as a method for classifying viruses based on gene compression. in this section we will consider fast algorithms to do exactly this and their complexity. since all real viral genomes are finite we will restrict ourselves to dealing with finite input languages here. we will describe algorithms which will verify each of the viral properties for a given input viral genome. a viral genome is a finite language in which the words are the genes of the virus.for a finite language l we let s l be the sum of the lengths of every word of l the length of the genome.we recall a wellknown and important result from . a partial deterministic finite automaton is a deterministic finite automaton in which each state need not have a transition on every letter. the smallest partial dfa for a given regular language is the partial dfa that recognizes the language and has the smallest number of states. in it is demonstrated that for each word w the smallest partial dfa accepting for each algorithm in this section we assume that we have some encoding of l as input whereby there is only one copy of each word given. we have discussed above how to perform the method suffix dfa. it is easy to pass in the reversal of a language to suffix dfa in time linear in s l . then in line of algorithm we can check to see if the intersection is empty by keeping a counter starting at k and running w through the transition function of m decreasing the counter at each step. then when the counter reaches we test every state we hit on input w to see whether it is a final state. if it is we increase l and set v indicating that w z l k. also in line we are testing whether w r z l r k. indeed by lemma w r z l r k if and only if w z l k. thus if this is true we increase l and set v to true. in addition w z l k if and only if w z l k z l k and so we increase l if and only if either v or v is true and we reset each to false. in this way when the method completes l l and l will be the maximum such that l satisfies w k l w k l and w k l respectively. furthermore this method runs in time os l time. in addition it is wellknown that we can test whether a word w is in the language generated by an nfa in time oqw see . thus to find the largest integer l such that l satisfies w k l we construct the nfa from l and decide membership of w r for each w l. this takes time ow q w m q oqs l . thus one can decide whether a finite language l satisfies w k l in time os l . finally the strong properties can also be verified straightforwardly using the algorithms presented above. indeed they are just a special case where l l. we summarize the preceding thusly proposition . let i satisfy i and let be some fixed alphabet. then given a finite language l as input without duplicates and k n we can both find the largest integer l such that l satisfies w i k l and we can decide whether l satisfies v i k in time os l . furthermore we can both find the largest l whereby l satisfies w k l and we can decide whether l satisfies v k in time os l .we have presented here a formalization of the process of gene compression that occurs in many viral genomes. we have shown dependencies and relationships between these properties and demonstrated that in general most of the weak versions of the properties can be decided for languages defined by nondeterministic finite automata augmented with reversalbounded counters while the strong versions can be decided for regular languages. most significantly we have given algorithms which can efficiently decide these properties for real viral genomes and provide information which is immediately useful to virologists. these algorithms give us the ability to study the relative amount of gene compression between related viruses in a quantifiable way. it may be possible to infer evolutionary relationships between viruses using this information. the fact that genes overlap one another provides a very serious constraint for viral genome evolution. it is known that viruses occasionally aquire genes horizontally that is a gene from an infected host becomes part of the viruss own genome. clearly only those genes which meet very specific constraints e.g. those that are compressible relative to the viruss genome will be able to be incorporated into the virus. using the algorithms presented here and real viral genome data we can find target genes in the host organism which due to their structure have the greatest probability of being incorporated into the viral genome.finally the formal properties here also present a framework for automated classification of a virus given only its genome. the family of coronaviruses for example has a very regular genomic structure a single strand of sense rna of length kb. the beginning of this rna strand always encodes a viral polymerase often as part of a polyprotein and the remainder encodes a series of nested genes. each of these nested genes is a proper suffix of the previous gene.this structure can obviously be formally encoded using the properties given here. similar compression regularities can be found in other viral genomes and encoded using our properties. classification of a new virus is then simply a matter of verifying compliance to our properties and then checking to see if this matches any known structures.by formalizing this ancient form of data compression we have provided tools which will allow for further insight in the molecular evolution of viruses and assist in the automated classification of new viruses by reference to only their genomes..